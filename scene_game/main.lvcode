{
	"header": {
		"content_type": "lvcode",
		"flavor": "scene",
		"version": "1.0.0"
	},
	"body": {
		"declarations": {
			"code": [
				" ",
				"int f; ",
				"int line;",
				"int subline;",
				"int shipAngle;",
				"int shipX;",
				"int shipY;",
				"",
				"typedef struct Bullet {",
				"    bool ally;",
				"    int x, y;",
				"    int dx, dy;",
				"    Bullet *next;",
				"",
				"    Bullet(bool isHero, int _x, int _y, int _dx, int _dy) {",
				"        ally = isHero;",
				"        x = _x; y = _y;",
				"        dx = _dx; dy = _dy;",
				"        next = 0;",
				"    } ",
				"",
				"} Bullet;",
				"",
				"typedef struct Enemy {",
				"",
				"    int type;",
				"    int x, y, cx, cy;",
				"    int dying;",
				"    Enemy *next;",
				"    ",
				"    Enemy(int _type, int _x, int _y, int _cx, int _cy) {",
				"        x = _x; y = _y;",
				"        cx = _cx; cy = _cy;",
				"        type = _type;",
				"        next = 0;",
				"        dying = 0;",
				"    } ",
				"",
				"    void update();",
				"    void explode();",
				"",
				"} Enemy;",
				"",
				"Bullet* bullets = NULL;",
				"Enemy* enemies = NULL;",
				"",
				"// helper functions",
				"void drawBackground();",
				"void updateBackground();",
				"void updateBullets();",
				"void updateEnemies();",
				"",
				"",
				"void addEnemy(int type, int x, int y, int cx, int cy);",
				"void addEnemyBullet(int x, int y, int dx, int dy);",
				"void addHeroBullet(int x, int y);",
				"",
				"void updateShip();",
				"void drawShip();",
				"void drawHUD();",
				"void drawBullets();",
				"void drawEnemies();",
				"",
				"// exported from tiled editor",
				"// it's ok to be on ROM (const)",
				"const unsigned int map[256][16] = {{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},",
				"{ 58,57,58,59,88,35,96,97,98,99,100,97,97,98,99,100},",
				"{ 74,73,74,75,39,40,131,34,34,34,34,34,34,34,34,34},",
				"{ 73,74,90,87,88,35,132,34,34,34,34,34,34,34,34,34},",
				"{ 89,90,35,96,97,98,148,34,34,34,34,34,34,34,34,34},",
				"{ 98,99,100,148,34,34,34,34,34,34,34,34,34,34,113,115},",
				"{ 34,34,34,34,34,34,34,34,34,113,114,115,114,115,165,35},",
				"{ 34,34,34,34,34,113,115,114,115,165,35,0,1,2,3,3},",
				"{ 34,34,34,34,113,165,35,87,88,35,35,16,17,18,19,19},",
				"{ 34,34,34,113,165,39,40,35,0,1,2,66,67,43,37,38},",
				"{ 34,34,34,149,35,35,87,88,16,17,18,82,51,52,53,69},",
				"{ 114,114,115,165,0,1,2,3,66,67,39,40,52,53,54,53},",
				"{ 35,35,39,40,16,17,18,19,82,37,38,52,53,69,70,69},",
				"{ 45,46,44,35,32,33,35,43,52,53,54,53,54,53,54,53},",
				"{ 61,62,63,35,48,49,35,35,68,69,70,69,70,69,70,71},",
				"{ 77,78,79,44,32,33,39,40,43,68,69,53,54,53,54,55},",
				"{ 93,79,44,35,48,49,35,35,51,52,53,69,70,69,70,71},",
				"{ 39,40,43,40,32,33,39,39,40,85,86,85,86,85,86,43},",
				"{ 97,98,99,101,32,33,96,97,97,99,99,99,99,99,99,97},",
				"{ 211,34,34,129,32,33,132,34,34,34,34,34,34,34,34,34},",
				"{ 210,211,34,129,32,33,132,34,210,211,210,211,210,210,211,210},",
				"{ 210,211,34,129,48,49,132,34,210,211,34,210,211,34,34,34},",
				"{ 210,211,34,145,146,147,148,210,210,211,210,211,211,210,210,211},",
				"{ 210,210,211,34,34,34,210,211,211,211,34,34,34,210,210,211},",
				"{ 211,210,211,210,211,211,34,210,211,34,210,210,211,210,211,34},",
				"{ 34,34,34,34,210,210,211,34,34,34,34,34,34,34,34,34},",
				"{ 34,210,211,34,210,211,34,34,34,34,34,34,159,34,34,34},",
				"{ 34,34,34,34,210,211,34,34,34,34,34,211,34,34,34,211},",
				"{ 34,34,34,159,34,34,34,34,34,34,34,211,114,115,116,34},",
				"{ 34,34,34,34,34,34,34,34,34,34,211,129,155,156,132,34},",
				"{ 34,34,34,34,34,34,34,34,34,211,34,145,146,147,148,211},",
				"{ 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 34,34,34,34,34,34,34,34,34,34,211,34,34,211,211,34},",
				"{ 34,211,211,211,34,34,34,34,34,34,34,34,34,159,34,34},",
				"{ 113,114,115,116,159,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 129,35,44,132,34,211,211,34,34,34,34,34,34,34,34,34},",
				"{ 145,146,147,148,34,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 34,34,34,159,34,34,34,210,211,34,34,34,34,210,210,211},",
				"{ 34,34,34,34,34,34,34,210,211,34,34,34,34,34,34,34},",
				"{ 34,34,210,211,159,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 159,34,34,34,34,34,34,34,34,34,34,34,210,211,34,34},",
				"{ 34,34,34,34,210,211,34,34,159,34,34,34,34,34,210,211},",
				"{ 34,210,113,114,115,116,34,34,34,34,210,211,34,34,159,34},",
				"{ 34,34,129,87,35,132,34,34,34,34,34,34,34,34,34,34},",
				"{ 34,113,165,35,87,160,34,34,210,211,34,34,34,113,162,163},",
				"{ 34,129,6,7,47,35,160,116,34,34,34,34,34,133,35,52},",
				"{ 34,129,22,23,35,44,35,132,34,159,34,34,34,133,35,68},",
				"{ 34,129,47,35,84,47,96,148,34,34,34,34,210,133,35,37},",
				"{ 34,129,35,44,47,96,148,210,210,211,34,34,34,133,52,53},",
				"{ 159,129,87,35,96,148,34,210,210,211,34,34,210,133,68,69},",
				"{ 159,145,146,147,148,210,211,159,211,211,159,210,210,133,35,68},",
				"{ 34,34,159,211,34,210,211,34,34,34,34,34,210,133,43,35},",
				"{ 159,159,159,159,34,159,159,34,159,211,211,210,210,145,101,43},",
				"{ 34,159,34,34,210,210,159,159,159,211,34,210,159,159,145,101},",
				"{ 34,34,210,211,34,211,34,34,34,34,159,159,159,210,211,145},",
				"{ 210,211,210,211,159,159,34,210,211,34,34,34,34,210,211,34},",
				"{ 210,211,34,210,211,211,211,34,210,211,34,34,34,34,34,34},",
				"{ 34,34,210,210,34,159,159,34,34,159,34,34,159,159,34,34},",
				"{ 34,34,34,34,159,34,34,34,34,34,34,34,210,159,34,159},",
				"{ 194,194,194,194,194,194,195,194,194,195,196,34,34,34,34,34},",
				"{ 50,50,175,175,50,50,191,50,251,50,240,196,193,242,243,244},",
				"{ 251,175,235,50,203,50,50,235,50,251,50,212,209,173,174,251},",
				"{ 175,175,203,50,50,203,50,50,50,251,191,212,209,189,190,50},",
				"{ 110,109,110,109,110,109,110,109,110,50,50,212,209,50,50,175},",
				"{ 126,125,126,125,126,125,126,125,126,127,235,212,209,251,251,50},",
				"{ 142,141,142,141,142,141,142,141,142,143,176,228,209,50,191,219},",
				"{ 158,157,158,157,158,157,158,157,158,176,228,34,225,181,50,50},",
				"{ 180,180,177,178,177,177,177,180,177,228,34,211,159,225,181,203},",
				"{ 210,34,210,34,113,161,161,161,161,161,161,162,163,116,225,226},",
				"{ 161,162,163,164,165,43,43,35,123,43,35,123,35,160,161,161},",
				"{ 167,167,168,169,167,168,169,167,168,169,52,55,167,168,167,168},",
				"{ 10,11,123,6,7,35,43,8,9,84,68,71,43,35,47,84},",
				"{ 26,27,35,22,23,10,11,24,25,84,87,88,35,6,7,35},",
				"{ 123,8,9,123,35,26,27,88,39,40,6,7,35,22,23,10},",
				"{ 35,24,25,43,43,137,6,7,153,35,22,23,35,35,43,26},",
				"{ 167,167,167,168,169,170,43,156,166,167,167,167,6,7,167,168},",
				"{ 2,3,3,2,2,3,2,3,3,2,3,2,2,3,3,3},",
				"{ 35,156,47,35,43,44,35,44,47,96,98,99,99,98,98,98},",
				"{ 146,147,100,101,44,155,35,43,35,132,113,163,164,114,114,114},",
				"{ 162,163,116,145,146,99,99,99,98,148,149,52,55,43,87,35},",
				"{ 41,42,160,161,115,115,115,115,162,164,165,68,71,87,43,47},",
				"{ 57,58,42,168,168,41,42,35,43,87,43,137,168,56,42,168},",
				"{ 73,57,58,42,41,57,58,59,167,168,169,170,56,57,58,42},",
				"{ 72,73,74,57,58,73,57,58,59,41,42,56,57,58,73,74},",
				"{ 88,89,90,73,74,57,58,57,58,57,58,57,58,57,58,57},",
				"{ 51,56,59,89,90,73,74,73,74,73,74,73,74,73,74,73},",
				"{ 155,72,75,35,51,89,90,89,90,73,74,89,90,73,74,57},",
				"{ 98,99,100,101,39,45,46,40,51,89,90,45,46,89,90,73},",
				"{ 211,159,210,145,101,47,62,63,45,46,45,61,62,63,51,89},",
				"{ 34,34,34,34,117,155,35,77,78,77,78,77,78,94,12,13},",
				"{ 159,34,210,34,145,98,99,100,101,93,94,93,94,35,28,29},",
				"{ 34,210,34,159,113,114,115,116,117,35,35,35,156,155,156,35},",
				"{ 162,163,164,164,165,87,36,144,145,146,146,146,146,146,146,147},",
				"{ 87,36,87,39,40,36,44,160,161,162,162,162,162,162,162,163},",
				"{ 103,103,103,103,104,106,36,91,92,88,88,36,95,44,156,95},",
				"{ 119,119,119,119,120,122,44,107,108,36,44,88,111,155,36,111},",
				"{ 123,47,123,47,123,135,104,104,104,104,104,104,104,104,104,104},",
				"{ 47,123,47,95,47,151,120,120,120,120,120,120,120,120,120,120},",
				"{ 47,47,95,111,91,92,36,43,36,95,91,92,36,43,43,95},",
				"{ 36,95,111,36,107,108,95,91,92,111,107,108,95,91,92,111},",
				"{ 36,111,91,92,36,43,111,107,108,36,43,36,111,107,108,36},",
				"{ 91,92,107,108,102,103,105,103,105,103,103,105,103,105,104,105},",
				"{ 107,108,36,36,118,119,121,119,121,119,119,121,119,121,120,121},",
				"{ 104,105,105,105,136,0,1,2,2,2,2,2,2,3,4,5},",
				"{ 120,121,121,121,152,16,17,102,103,103,103,103,103,106,64,65},",
				"{ 0,1,2,3,3,66,67,118,119,119,119,119,119,122,39,40},",
				"{ 16,17,18,19,19,82,83,134,14,15,156,44,156,135,104,104},",
				"{ 66,67,102,103,103,103,103,136,30,31,155,156,47,151,120,120},",
				"{ 82,83,118,119,119,119,119,152,156,41,42,41,42,42,47,87},",
				"{ 103,104,136,47,14,15,155,155,56,58,57,58,57,58,59,87},",
				"{ 119,120,152,35,30,31,41,42,72,74,73,74,73,74,75,156},",
				"{ 47,35,39,14,15,56,57,58,57,58,57,58,57,58,59,47},",
				"{ 87,156,35,30,31,72,73,74,73,74,73,74,73,74,75,39},",
				"{ 87,47,156,35,47,155,89,90,89,90,73,74,89,90,155,35},",
				"{ 104,105,105,105,106,35,88,155,14,15,89,90,155,102,103,103},",
				"{ 120,121,121,121,122,39,40,88,30,31,155,156,47,118,119,119},",
				"{ 47,156,14,15,138,47,156,35,87,88,39,102,103,136,156,47},",
				"{ 87,88,30,31,154,35,39,39,156,47,35,118,119,152,47,155},",
				"{ 47,155,35,156,135,103,104,104,104,104,104,136,47,47,88,47},",
				"{ 40,88,156,155,151,119,120,120,120,120,120,152,156,35,35,47},",
				"{ 39,40,47,95,91,92,35,95,35,36,35,47,47,95,47,35},",
				"{ 91,92,36,111,107,108,36,111,47,35,95,36,87,111,87,95},",
				"{ 107,108,87,47,87,95,47,40,91,92,111,47,91,92,87,111},",
				"{ 35,95,102,103,106,111,40,95,107,108,47,95,107,108,95,36},",
				"{ 87,111,118,119,122,35,88,111,35,47,88,111,35,88,111,95},",
				"{ 104,105,136,95,135,104,105,104,104,105,104,105,105,105,106,111},",
				"{ 120,121,152,111,151,120,121,120,120,121,120,121,121,121,122,35},",
				"{ 155,155,35,156,35,35,35,156,155,35,35,155,35,156,135,104},",
				"{ 3,3,3,3,3,3,3,3,3,3,3,3,4,5,151,120},",
				"{ 19,19,19,19,19,19,19,19,19,19,19,19,20,21,156,155},",
				"{ 35,47,35,35,39,40,35,39,40,87,88,88,64,65,2,3},",
				"{ 35,35,43,47,139,39,87,88,139,35,35,139,80,81,18,19},",
				"{ 47,47,35,139,35,35,35,139,35,39,40,35,87,88,139,35},",
				"{ 35,44,123,35,35,43,87,35,35,139,35,139,35,47,35,47},",
				"{ 45,46,123,35,139,35,35,139,47,35,35,35,35,139,35,43},",
				"{ 61,62,63,35,123,87,43,35,47,43,139,37,38,37,38,37},",
				"{ 77,78,79,44,35,123,35,139,39,40,54,53,54,53,54,53},",
				"{ 61,62,63,35,35,52,55,52,53,54,70,69,70,69,70,69},",
				"{ 77,78,79,44,87,68,71,68,69,70,54,53,54,53,54,53},",
				"{ 63,79,123,35,35,35,139,40,68,69,70,69,70,69,70,69},",
				"{ 79,44,35,44,35,35,35,35,139,85,86,85,86,85,86,85},",
				"{ 63,35,47,87,88,35,0,1,2,2,2,2,2,2,2,2},",
				"{ 79,47,35,35,35,35,16,17,18,18,18,18,18,18,18,18},",
				"{ 63,35,44,35,6,7,32,33,43,39,40,6,7,35,6,7},",
				"{ 79,44,123,35,22,23,32,33,35,35,43,22,23,35,22,23},",
				"{ 63,47,87,88,87,88,32,33,39,40,43,87,88,43,35,35},",
				"{ 79,47,44,35,35,35,32,33,6,7,35,43,35,39,40,35},",
				"{ 63,35,123,87,87,88,32,33,22,23,87,88,35,8,9,35},",
				"{ 62,63,35,44,35,35,64,65,2,2,2,2,3,24,25,35},",
				"{ 78,62,46,35,35,35,80,81,18,18,18,18,19,35,35,35},",
				"{ 62,61,62,63,47,87,88,35,35,87,88,35,35,35,87,88},",
				"{ 78,77,78,79,35,35,35,35,35,35,35,35,35,35,96,97},",
				"{ 35,93,94,35,35,35,87,88,35,35,35,35,87,88,112,113},",
				"{ 44,123,35,35,35,44,35,35,40,35,39,40,43,35,128,133},",
				"{ 87,88,43,44,40,35,43,35,35,44,35,87,88,40,144,149},",
				"{ 87,96,99,101,96,97,98,101,40,43,35,44,96,98,148,145},",
				"{ 43,128,34,129,132,34,34,133,96,101,39,40,128,34,34,34},",
				"{ 39,144,34,129,132,34,113,165,132,133,87,88,160,114,114,115},",
				"{ 99,148,34,145,148,34,145,146,148,145,101,43,35,96,101,43},",
				"{ 34,34,34,34,34,34,34,34,34,34,145,146,147,148,133,35},",
				"{ 115,116,34,34,34,34,34,34,34,34,34,34,34,34,145,99},",
				"{ 43,132,34,193,194,195,195,194,195,195,194,195,195,195,195,194},",
				"{ 146,148,34,213,235,50,50,50,203,50,50,235,50,124,125,126},",
				"{ 244,243,244,245,236,237,251,50,50,50,50,235,203,140,141,142},",
				"{ 109,110,203,50,252,253,182,183,183,184,185,186,50,124,125,126},",
				"{ 125,126,127,251,50,50,198,199,199,200,201,202,251,140,141,142},",
				"{ 126,125,126,127,109,110,214,203,204,205,219,218,50,50,124,125},",
				"{ 142,141,142,143,140,143,230,235,220,221,251,234,173,174,140,141},",
				"{ 158,157,158,235,251,50,214,191,191,191,175,218,189,190,50,235},",
				"{ 50,235,50,50,50,203,230,175,191,175,191,234,219,50,50,251},",
				"{ 185,185,185,185,185,185,216,191,191,191,191,215,185,185,185,185},",
				"{ 201,201,201,201,201,201,232,175,175,175,50,231,201,201,201,201},",
				"{ 177,180,177,178,177,178,177,180,180,177,177,177,177,178,177,180},",
				"{ 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},",
				"{ 34,34,34,34,34,34,34,34,34,34,193,194,195,194,194,194},",
				"{ 34,193,242,243,242,243,196,34,34,193,245,50,191,175,236,237},",
				"{ 244,245,173,174,124,127,240,194,195,245,50,203,171,172,252,253},",
				"{ 50,191,189,190,140,143,50,50,203,50,50,50,187,188,50,219},",
				"{ 50,235,50,50,50,175,50,50,50,175,236,237,50,175,50,50},",
				"{ 191,50,219,50,175,50,124,127,235,50,252,253,50,191,236,237},",
				"{ 177,178,179,180,181,50,140,143,50,191,50,175,50,50,252,253},",
				"{ 34,34,34,34,225,178,179,180,178,179,181,50,50,235,203,50},",
				"{ 34,34,113,162,163,162,163,164,116,34,225,181,219,50,50,50},",
				"{ 162,163,165,60,63,44,45,46,160,116,34,225,177,178,179,180},",
				"{ 87,88,44,76,79,60,61,62,63,160,162,163,162,162,163,164},",
				"{ 103,103,104,105,106,76,77,78,79,44,52,55,43,44,52,55},",
				"{ 119,119,120,121,122,35,93,94,35,43,68,71,44,43,68,71},",
				"{ 2,3,4,5,135,103,104,105,104,105,103,104,105,103,104,105},",
				"{ 18,19,20,21,151,119,120,121,120,121,119,120,121,119,120,121},",
				"{ 39,88,64,65,2,3,3,2,2,3,2,3,3,2,2,3},",
				"{ 42,41,42,81,18,19,19,18,18,19,18,19,19,18,18,19},",
				"{ 58,57,58,59,88,35,96,97,98,99,100,97,97,98,99,100},",
				"{ 74,73,74,75,39,40,131,34,34,34,34,34,34,34,34,34},",
				"{ 73,74,90,87,88,35,132,34,34,34,34,34,34,34,34,34},",
				"{ 89,90,35,96,97,98,148,34,34,34,34,34,34,34,34,34},",
				"{ 98,99,100,148,34,34,34,34,34,34,34,34,34,34,113,115},",
				"{ 34,34,34,34,34,34,34,34,34,113,114,115,114,115,165,35},",
				"{ 34,34,34,34,34,113,115,114,115,165,35,0,1,2,3,3},",
				"{ 34,34,34,34,113,165,35,87,88,35,35,16,17,18,19,19},",
				"{ 34,34,34,113,165,39,40,35,0,1,2,66,67,43,37,38},",
				"{ 34,34,34,149,35,35,87,88,16,17,18,82,51,52,53,69},",
				"{ 114,114,115,165,0,1,2,3,66,67,39,40,52,53,54,53},",
				"{ 35,35,39,40,16,17,18,19,82,37,38,52,53,69,70,69},",
				"{ 45,46,44,35,32,33,35,43,52,53,54,53,54,53,54,53},",
				"{ 61,62,63,35,48,49,35,35,68,69,70,69,70,69,70,71},",
				"{ 77,78,79,44,32,33,39,40,43,68,69,53,54,53,54,55},",
				"{ 93,79,44,35,48,49,35,35,51,52,53,69,70,69,70,71}};",
				""
			]
		},
		"on_enter": {
			"code": [
				"// on enter",
				"",
				"f = 0;",
				"line = 255;",
				"subline = 8;",
				"shipAngle = 0;",
				"",
				"shipX = (lvk_display_w - 16) / 2;",
				"shipY = lvk_display_h - 28;"
			]
		},
		"on_frame": {
			"code": [
				"",
				"",
				"f++;",
				"",
				"updateBackground();",
				"updateShip();",
				"updateBullets();",
				"updateEnemies();",
				"",
				"drawBackground();",
				"drawBullets();",
				"drawEnemies();",
				"drawShip();",
				"drawHUD();",
				""
			]
		},
		"on_awake": {
			"code": [
				"",
				"} // functions",
				"",
				"",
				"void updateShip(){",
				"",
				"    if (lvGamepad(0).up) {",
				"        shipY = (shipY > 30) ? shipY - 1 : 30;",
				"    } else if (lvGamepad(0).down) {",
				"        int limit = lvk_display_h - 28;",
				"        shipY = (shipY < limit) ? shipY + 1 : limit;",
				"    } ",
				"",
				"    if (lvGamepad(0).left) {",
				"        shipAngle = shipAngle > -2 ? shipAngle - 1 : -2;",
				"    } else if (lvGamepad(0).rigth) {",
				"        shipAngle = shipAngle < 2 ? shipAngle + 1 : 2;",
				"    } else {",
				"        if (shipAngle < 0) shipAngle++;",
				"        else if (shipAngle > 0) shipAngle--;",
				"    }",
				"",
				"    if (shipAngle) {",
				"        shipX += shipAngle;",
				"        if( shipX < 1 ) shipX = 1;",
				"        if( shipX > lvk_display_w - 18 ) shipX = lvk_display_w - 18;",
				"    }",
				"",
				"    if(lvGamepads.isDown(lvGamepad(0).a)) {",
				"        addHeroBullet(shipX + 4, shipY);",
				"    }",
				"",
				"}",
				"",
				"void Enemy::update(){",
				"",
				"    // start vs end positions",
				"    if(this->cy > this->y) this->cy--;",
				"    if(this->cy < this->y) this->cy++;",
				"    if(this->cx > this->x) this->cx--;",
				"    if(this->cx < this->x) this->cx++;",
				"",
				"    Bullet *bp = bullets;",
				"",
				"    if(this->dying > 1) {",
				"",
				"        if(f%4 == 3) {",
				"            this->dying -= 1;",
				"            if(this->dying == 4) this->explode();",
				"        }",
				"        ",
				"        return;",
				"",
				"    } else if (this->dying == 1) {",
				"        return;",
				"    }",
				"",
				"    while(bp != NULL){",
				"",
				"        if(bp->ally == true) {",
				"            int mx = this->x + 4;",
				"            int my = this->y + 4;",
				"            int bdx = (bp->x - mx) * (bp->x - mx);",
				"            int bdy = (bp->y - my) * (bp->y - my);",
				"",
				"            if (bdx < 25 && bdy < 25) {",
				"                this->dying = 6;",
				"                return;",
				"            }",
				"        }",
				"",
				"        bp = bp->next;",
				"    }",
				"",
				"    if((f + this->x)%30 == 0) {",
				"        addEnemyBullet(this->x + 4, this->y, 0, 2);",
				"    }",
				"}",
				"",
				"void Enemy::explode(){",
				"    addEnemyBullet(this->x + 4, this->y,  2,  2);",
				"    addEnemyBullet(this->x + 4, this->y, -2,  2);",
				"    addEnemyBullet(this->x + 4, this->y,  2, -2);",
				"    addEnemyBullet(this->x + 4, this->y,  2, -2);",
				"}",
				"",
				"void addEnemy(int type, int x, int y, int cx, int cy) {",
				"",
				"    // empty list case",
				"    if (enemies == NULL) {",
				"        enemies = new Enemy(type, x, y, cx, cy);",
				"        ",
				"    } else {",
				"        Enemy *ep = enemies;",
				"        while(ep && ep->next != NULL) ep = ep->next;",
				"        ep->next = new Enemy(type, x, y, cx, cy);",
				"    }",
				"",
				"}",
				"",
				"void addEnemyBullet(int x, int y, int dx, int dy){",
				"    // empty list case",
				"    if (bullets == NULL) {",
				"        bullets = new Bullet(false, x, y, dx, dy);",
				"        ",
				"    } else {",
				"        Bullet *bp = bullets;",
				"        while(bp && bp->next != NULL) bp = bp->next;",
				"        bp->next = new Bullet(false, x, y, dx, dy);",
				"    }",
				"}",
				"",
				"void addHeroBullet(int x, int y){",
				"",
				"    // empty list case",
				"    if (bullets == NULL) {",
				"        bullets = new Bullet(true, x, y, 0, -2);",
				"        ",
				"    } else {",
				"        Bullet *bp = bullets;",
				"        while(bp && bp->next != NULL) bp = bp->next;",
				"        bp->next = new Bullet(true, x, y, 0, -2);",
				"    }",
				"    ",
				"}",
				"",
				"void updateBullets(){",
				"    Bullet *bp = bullets;",
				"    while(bp != NULL){",
				"",
				"        bp->x += bp->dx;",
				"        bp->y += bp->dy;",
				"",
				"        if (bp->next != NULL && (bp->next->y < 5 || bp->next->y > lvk_display_h )) {",
				"            Bullet *twoAhead = bp->next->next;",
				"            delete bp->next;",
				"            bp->next = twoAhead;",
				"        }",
				"",
				"        bp = bp->next;",
				"    }",
				"}",
				"",
				"void drawBullets(){",
				"",
				"    Bullet *bp = bullets;",
				"",
				"    while(bp != NULL){",
				"        Bullet b = *(bp);",
				"        PNG::hero->draw(",
				"            lv::Region( 80 + (((f/2)%2) * 8 ) + (b.ally ? 0 : 16), 0, 8, 8),",
				"            lv::Point( b.x , b.y)",
				"        );",
				"        bp = b.next;",
				"    }",
				"}",
				"",
				"void updateEnemies(){",
				"    Enemy *ep = enemies;",
				"",
				"    if(ep == NULL) {",
				"        addEnemy(0, 20, 20, -20, 0);",
				"        addEnemy(0, 40, 15, 30, 0);",
				"        addEnemy(0, 60, 15, 70, 0);",
				"        addEnemy(0, 80, 20, 130, 0);",
				"    }",
				"",
				"    // roots can die to :C ",
				"    if (ep && ep->dying == 1) {",
				"        Enemy *ahead = ep->next;",
				"        delete ep;",
				"        ep = ahead;",
				"        enemies = ahead;",
				"    }",
				"",
				"    while(ep != NULL) {",
				"",
				"        if (ep->next != NULL && ep->next->dying == 1) {",
				"            Enemy *twoAhead = ep->next->next;",
				"            delete ep->next;",
				"            ep->next = twoAhead;",
				"        }",
				"",
				"        ep->update();",
				"        ep = ep->next;",
				"    }",
				"}",
				"",
				"void drawEnemies(){",
				"    Enemy *ep = enemies;",
				"",
				"    while(ep != NULL){",
				"        Enemy e = *(ep);",
				"",
				"        if (e.dying > 0) {",
				"",
				"            PNG::hero->draw(",
				"                lv::Region( 32 + (6 - e.dying) * 16, 48, 16, 16),",
				"                lv::Point( e.x , e.y)",
				"            );",
				"    ",
				"        } else {",
				"",
				"            PNG::hero->draw(",
				"                lv::Region( (f/2)%2 * 16, 48, 16, 16),",
				"                lv::Point( e.cx , e.cy)",
				"            );",
				"        }",
				"        ",
				"        ep = e.next;",
				"    }",
				"}",
				"",
				"void drawShip(){",
				"    PNG::hero->draw(",
				"        lv::Region( (shipAngle + 2) * 16, (f/2)%2 * 24, 16, 24),",
				"        lv::Point( shipX , shipY)",
				"    );",
				"}",
				"",
				"",
				"void drawHUD(){",
				"    lvDisplay.fillRect(lv::Region(0,0,130,10), 0);",
				"}",
				"",
				"void updateBackground() {",
				"    if(--subline == 0){",
				"        subline = 8;",
				"        line -= 1;",
				"        if (line == 63) line = 255;",
				"    }",
				"}",
				"",
				"void drawBackground(){",
				"",
				"    for(int y = 0; y < 16; y++) {",
				"        for(int x = 0; x < 16; x++) {",
				"            char tile = map[line - y][x];",
				"            PNG::bg->draw(",
				"                lv::Region( (tile%16) * 8, (tile/16) * 8, 8, 8),",
				"                lv::Point( x * 8, (16 - y) * 8 - subline)",
				"            );",
				"        }",
				"    }",
				"",
				"//}",
				""
			]
		},
		"on_exit": {
			"code": [
				" ",
				"",
				" "
			]
		}
	}
}